#include "Number.hpp"

#include <cstdlib>
#include <algorithm>

Number::Number() : number("0"), is_negative(false)
{}

Number::Number(std::string num)
{
    if (!is_valid_num(num))
    {} //error

    if (number[0] == '-')
    {
        is_negative = true;
        num.erase(num.begin());
    }
    else
        is_negative = false;

    number = std::string(num.end(), num.begin());
}

Number(const std::string num, bool is_negative) : is_negative(is_negative)
{
    if (!is_valid_num(num))
    {} //error
    else if (number[0] == '-')
    {} //error

    number = num;
}

friend Number Number::operator+(const Number &number1, const Number &number2)
{
    if (number1.is_negative)
        return operator-(number2, Number(number1.number, false));
    else if (number2.is_negative)
        return operator-(number1, Number(number2.number, false));
        
    std::
}

friend Number Number::operator-(const Number &number1, const Number &number2)
{
}
/*Number& operator+=(const Number &num)
{
    if (is_negative)
    {
        std::swap(number, num.number);
        std::swap(is_negative, num.is_negative);
    }

    if (num.is_negative)
    {
        num.is_negative = false;
        operator-=(num);

        return *this;
    }

    std::string result = "";

    int carry = 0;
    for (size_t i = 0; i < number.length(); i++)
    {
        int digit_sum = char_to_digit(number[i]) + char_to_digit(num.number[i]) + carry;
        if (digit_sum > 9)
        {
            carry = 1;
            digit_sum -= 10;
        }

        result += digit_to_char(digit_sum);
    }

    if (carry)
        result += '1';

    return *this;
}*/

bool Number::is_valid_num(std::string num) const
{}

void Number::make_equal_length(std::string &num)
{
    if (number.size() > num.size())
        num.append(number.size() - num.size(), '0');
    else if (number.size() < num.size())
        number.append(num.size() - number.size(), '0');
}

inline int Number::char_to_digit(char c) const
{
    return c - '0';
}

inline char Number::digit_to_char(int i) const
{
    if (i < 0 || i > 9)
    {} //error

    return i + '0';
}
