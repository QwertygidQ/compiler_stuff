QProc

Big-endian

Instruction word - 1 byte (uint8_t)

Data stack (DS) - std::stack<int32_t> (Data word - 32 bits = 4 bytes)
Instruction stack (IS) - std::stack<size_t>
Instruction pointer (IP) - size_t
Program memory (PM) - uint8_t[4096] (4 kiB = 4096 bytes)

Instructions:
NOP    (0x00) - do nothing
ADD    (0x01) - pop Y, pop X, push X + Y
SUB    (0x02) - pop Y, pop X, push X - Y
NEG    (0x03) - pop X, negate X
SHL    (0x04) - pop Y, pop X, X is shifted to the left by Y bits (non-circular, padding - 0)
SHR    (0x05) - pop Y, pop X, X is shifted to the right by Y bits (non-circular, padding - MSB)
AND    (0x06) - pop Y, pop X, push X AND Y
OR     (0x07) - pop Y, pop X, push X OR Y
XOR    (0x08) - pop Y, pop X, push X XOR Y
NOT    (0x09) - pop X, push NOT X
JMP    (0x0A) - pop X, set IP to X
JZ     (0x0B) - pop Y, pop X, if X == 0, set IP to Y
JNZ    (0x0C) - pop Y, pop X, if X != 0, set IP to Y
PUSH   (0x0D) - push next data word from PM and skip it
RM     (0x0E) - remove DS top
PUSHIP (0x0F) - push IP onto IS
POPIP  (0x10) - pop X from IS, set IP to X
RMIP   (0x11) - remove IS top
PUSHPM (0x12) - pop X, push data word starting at PM[X]
POPPM  (0x13) - pop Y, pop X, write Y (data word) to PM starting at PM[X]
INPUT  (0x14) - push data word of input
PEEK   (0x15) - output DS top
HALT   (0x16) - stop execution

Assembler specific stuff:
LABEL_NAME:		<- Label declaraction
call LABEL_NAME	<- Procedure call (Equal to PUSHIP, PUSH *LABEL_NAME's address*, JMP.
					To return from the procedure, use POPIP)
/*COMMENT*/		<- Comment declaraction

While compiling assembly language program to machine code, all label names should be
changed to their respective declaractions' addresses, and all label declaractions
should be ignored altogether, as well as all comments.

Assembly language EBNF:
digit				= "0" | "1" | "2" | "3" | "4" | "5" | "6" | 7" | "8" | "9";
character			= ? all visible characters ?;
white_space			= ? all whitespace characters ?;

integer				= ["-"], digit, {digit};
comment				= "/*", {character | white_space}, "*/";

no_operand_instr	= "NOP" | "ADD" | "SUB" | "NEG" | "SHL"
					| "SHR" | "AND" | "OR" | "XOR" | "NOT"
					| "JMP" | "JZ" | "JNZ" |"RM" |"PUSHIP"
					| "POPIP" | "RMIP" | "PUSHPM" | "POPPM"
					| "INPUT" | "PEEK" | "HALT";

operand_instr		= "PUSH" | "CALL";

label_name			= (character, {character}) - (no_operand_instr | operand_instr);
label_decl			= label_name, ":";
operand				= integer | label_name;

statement			= no_operand_instr | label_decl
					| (operand_instr, white_space, operand) | comment;
					
program				= {statement, white_space}, statement;